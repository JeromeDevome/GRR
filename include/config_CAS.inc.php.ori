<?php
/*
 * config_CAS.inc.php.ori
 * Ce fichier permet de configurer la récupération dans GRR d'attributs LDAP des utilisateurs envoyés par le serveur CAS Lire attentivement la documentation avant de modifier ce fichier
 * Dernière modification : $Date: 2017-12-16 14:00$
 * @author    JeromeB & Laurent Delineau
 * @copyright Copyright 2003-2018 Team DEVOME - JeromeB
 * @link      http://www.gnu.org/licenses/licenses.html
 *
 * This file is part of GRR.
 *
 * GRR is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation; either version 2 of the License, or
 * (at your option) any later version.
 */

/*
On ne peut pas invoquer directement la fonction "phpCAS::getAttribute()"
car elle n'est pas implémentée dans "CAS/CAS.php"
Dans cette bibliothèque, il n'y a que "phpCAS::getAttributes()" qui soit définie, contrairement à ce qui se passe avec "CAS/CAS/client.php".
*/
function getAttribute($key)
{
	global $PHPCAS_CLIENT, $PHPCAS_AUTH_CHECK_CALL;
	if (!is_object($PHPCAS_CLIENT))
	{
		phpCAS :: error('this method should not be called before ' . __CLASS__ . '::client() or ' . __CLASS__ . '::proxy()');
	}
	if (!$PHPCAS_AUTH_CHECK_CALL['done'])
	{
		phpCAS :: error('this method should only be called after ' . __CLASS__ . '::forceAuthentication() or ' . __CLASS__ . '::isAuthenticated()');
	}
	if (!$PHPCAS_AUTH_CHECK_CALL['result'])
	{
		phpCAS :: error('authentication was checked (by ' . $PHPCAS_AUTH_CHECK_CALL['method'] . '() at ' . $PHPCAS_AUTH_CHECK_CALL['file'] . ':' . $PHPCAS_AUTH_CHECK_CALL['line'] . ') but the method returned FALSE');
	}
	return $PHPCAS_CLIENT->getAttribute($key);
}

/*
 Récupération des différents attributs de l'annuaire LDAP envoyés par le serveur CAS
 Explication de la première ligne :
 phpCAS::getAttribute('user_nom_ldap') est la variable envoyé par CAS
 La fonction recuperer_nom() permet de traiter cette variable pour récupérer la valeur utilisée dans GRR
 Le résultat est alors stocké dans $user_nom

 Il en va de même des autres variables ci-dessous
 Vous pouvez personnaliser les fonctions de traitements des attributs LDAP envoyés par le serveur CAS
 en modifiant le code des fonctions ci-dessous.
*/
 $user_nom = recuperer_nom(phpCAS::getAttribute('user_nom_ldap'));
 $user_prenom = recuperer_prenom(phpCAS::getAttribute('user_prenom_ldap'));
 $user_language = recuperer_language(phpCAS::getAttribute('user_language_ldap'));
 $user_code_fonction = recuperer_code_fonction(phpCAS::getAttribute('user_code_fonction_ldap'));
 $user_libelle_fonction = recuperer_libelle_fonction(phpCAS::getAttribute('user_libelle_fonction_ldap'));
 $user_mail = recuperer_mail(phpCAS::getAttribute('user_mail_ldap'));
 $user_default_style = "argent";

/*
 Fonction permettant de récupérer le nom dans le champ LDAP $user_nom
*/
 function recuperer_nom($user_nom)
 {
  # Le cas échéant, remplacez la ligne suivante par le code PHP adéquat, correspondant à votre annuaire LDAP
 	return $user_nom;
 }

/*
 Fonction permettant de récupérer le prénom dans le champ LDAP $user_prenom
*/
 function recuperer_prenom($user_prenom)
 {
//Le cas échéant, remplacez la ligne suivante par le code PHP adéquat, correspondant à votre annuaire LDAP
 	return $user_prenom;
 }

/*
 Fonction permettant de récupérer la langue à partir de l'attribut $user_language de l'annuaire LDAP
 Exemple (Cas de l'ENT Esco-Portail) :
 -------------------------------------
 function recuperer_language($user_language) {
	$res = substr($user_language, 0, 2);
	if (strcasecmp($res, "fr") == 0) {
		$lang = "fr";
	}
	else if (strcasecmp($res, "en") == 0) {
		$lang = "en";
	}
	else if (strcasecmp($res, "de") == 0) {
		$lang = "de";
	}
	else if (strcasecmp($res, "it") == 0) {
		$lang = "it";
	}
	else if (strcasecmp($res, "es") == 0) {
		$lang = "es";
	}
	else {
		$lang = "fr";
	}
	return $lang;
 }
*/
 function recuperer_language($user_language)
 {
//Le cas échéant, remplacez la ligne suivante par le code PHP adéquat, correspondant à votre annuaire LDAP (voir exemple ci-dessous)
 	return $user_language;
 }

/*
 Fonction permettant de récupérer le code de la fonction dans le champ LDAP $user_code_fonction
 Exemple (Cas de l'ENT Esco-Portail) :
 -------------------------------------
 Récupération du code de la fonction dans le champ LDAP multivalué ENTPersonFonctions

 function recuperer_code_fonction($user_code_fonction) {
	$tab = explode ("$", $user_code_fonction);
	  return $tab[1];
 }
*/
 function recuperer_code_fonction($user_code_fonction)
 {
//Le cas échéant, remplacez la ligne suivante par le code PHP adéquat, correspondant à votre annuaire LDAP (voir exemple ci-dessous)
 	return $user_code_fonction;
 }


/*
 Fonction permettant de récupérer le libellé de la fonction dans le champ LDAP $user_libelle_fonction
 Exemple (Cas de l'ENT Esco-Portail) :
 -------------------------------------
 Récupération du libellé de la fonction dans le champ LDAP multivalué ENTPersonFonctions

 function recuperer_libelle_fonction($user_libelle_fonction) {
	$tab = explode ("$", $user_libelle_fonction);
	  return $tab[2];
 }
*/

 function recuperer_libelle_fonction($user_libelle_fonction)
 {
//Le cas échéant, remplacez la ligne suivante par le code PHP adéquat, correspondant à votre annuaire LDAP (voir exemple ci-dessous)
 	return $user_libelle_fonction;
 }

/*
 Fonction permettant de récupérer le mail dans le champ LDAP $user_mail
*/
 function recuperer_mail($user_mail)
 {
//Le cas échéant, remplacez la ligne suivante par le code PHP adéquat, correspondant à votre annuaire LDAP
 	return $user_mail;
 }
 ?>
